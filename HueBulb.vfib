{"name":"Hue Gilda","type":"virtual_device","properties":{"deviceIcon":1000,"currentIcon":"1000","mainLoop":"","saveLogs":"1","ui.sliderBlue.value":"0","ui.sliderGreen.value":"0","ui.sliderLevel.value":"79","ui.sliderRed.value":"0","rows":[{"type":"button","elements":[{"id":1,"lua":true,"waitForResponse":false,"caption":"On","name":"buttonOn","empty":false,"msg":"local HueDevice = 1    -- enter Philips Hue Light ID\n\n-- Nothing to customize below\n-- This code goes into the ON button and the 4 sliders\n\nlocal HueUser = 'domoplusplus'\nlocal HueAddress = fibaro:getGlobalValue('Philips_Hue_IP')\nlocal HuePort = 80\nlocal HueIcon = fibaro:getGlobalValue('Philips_Hue_IconID')\n\nlocal myDeviceID = fibaro:getSelfId()\nlocal R = fibaro:get(myDeviceID, \"ui.sliderRed.value\")\nlocal G = fibaro:get(myDeviceID, \"ui.sliderGreen.value\")\nlocal B = fibaro:get(myDeviceID, \"ui.sliderBlue.value\")\nlocal L = fibaro:get(myDeviceID, \"ui.sliderLevel.value\")\n\n--[[\n * Converts an RGB color value to HSL. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n * Assumes r, g, and b are contained in the set [0, 100] and\n * returns h, s, and l in the set [0, 1].\n Function modified from https://github.com/EmmanuelOga/columns/blob/master/utils/color.lua\n]]\nfunction rgbToHsl(r, g, b)\n  r, g, b = r / 100, g / 100, b / 100\n\n  local max, min = math.max(r, g, b), math.min(r, g, b)\n  local h, s, l\n\n  l = (max + min) / 2\n\n  if max == min then\n    h, s = 0, 0 -- achromatic\n  else\n    local d = max - min\n    if l > 0.5 then \n      s = d / (2 - max - min) \n    else \n      s = d / (max + min) \n    end\n    if max == r then\n      h = (g - b) / d\n      if g < b then \n        h = h + 6 \n      end\n    elseif max == g then \n      h = (b - r) / d + 2\n    elseif max == b then \n      h = (r - g) / d + 4\n    end\n    h = h / 6\n  end\n\n  return h, s, l\nend\n\n\nlocal hue, sat, bri\nhue, sat = rgbToHsl(R,G,B)\nhue = math.floor(hue * 65535)\nsat = math.floor(sat * 255)\nbri = math.floor(L * 2.55)\n\nlocal conn = Net.FHttp(HueAddress,HuePort) \nconn:PUT('/api/'..HueUser..'/lights/'..HueDevice..'/state', '{\"on\":true, \"bri\":'..bri..' , \"hue\":'..hue..' , \"sat\":'..sat..' }')\n\n-- now set the icon and store icon state\nHueIcon = HueIcon + math.floor(L*0.99/10) + 1  -- calculate IconID\nfibaro:call(myDeviceID, \"setProperty\", \"currentIcon\", HueIcon)\nfibaro:setGlobal('Philips_Hue_'..tostring(HueDevice), HueIcon)\n","buttonIcon":1010,"favourite":false,"main":false},{"id":2,"lua":true,"waitForResponse":false,"caption":"Off","name":"buttonOff","empty":false,"msg":"local HueDevice = 1    -- enter Philips Hue Light ID\n\n-- Nothing to customize below\n-- This code goes into the OFF button\n\nlocal HueUser = 'domoplusplus'\nlocal HueAddress = fibaro:getGlobalValue('Philips_Hue_IP')\nlocal HuePort = 80\nlocal HueIcon = fibaro:getGlobalValue('Philips_Hue_IconID')\nlocal myDeviceID = fibaro:getSelfId()\n\n\nlocal conn = Net.FHttp(HueAddress,HuePort) \nconn:PUT('/api/'..HueUser..'/lights/'..HueDevice..'/state', '{\"on\":false}')\n\n-- now set the off icon and store icon state\nfibaro:call(myDeviceID, \"setProperty\", \"currentIcon\", HueIcon)\nfibaro:setGlobal('Philips_Hue_'..tostring(HueDevice), HueIcon)\n","buttonIcon":1000,"favourite":false,"main":false}]},{"type":"slider","elements":[{"id":3,"lua":true,"waitForResponse":false,"caption":"Level","name":"sliderLevel","msg":"local HueDevice = 1    -- enter Philips Hue Light ID\n\n-- Nothing to customize below\n-- This code goes into the ON button and the 4 sliders\n\nlocal HueUser = 'domoplusplus'\nlocal HueAddress = fibaro:getGlobalValue('Philips_Hue_IP')\nlocal HuePort = 80\nlocal HueIcon = fibaro:getGlobalValue('Philips_Hue_IconID')\n\nlocal myDeviceID = fibaro:getSelfId()\nlocal R = fibaro:get(myDeviceID, \"ui.sliderRed.value\")\nlocal G = fibaro:get(myDeviceID, \"ui.sliderGreen.value\")\nlocal B = fibaro:get(myDeviceID, \"ui.sliderBlue.value\")\nlocal L = fibaro:get(myDeviceID, \"ui.sliderLevel.value\")\n\n--[[\n * Converts an RGB color value to HSL. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n * Assumes r, g, and b are contained in the set [0, 100] and\n * returns h, s, and l in the set [0, 1].\n Function modified from https://github.com/EmmanuelOga/columns/blob/master/utils/color.lua\n]]\nfunction rgbToHsl(r, g, b)\n  r, g, b = r / 100, g / 100, b / 100\n\n  local max, min = math.max(r, g, b), math.min(r, g, b)\n  local h, s, l\n\n  l = (max + min) / 2\n\n  if max == min then\n    h, s = 0, 0 -- achromatic\n  else\n    local d = max - min\n    if l > 0.5 then \n      s = d / (2 - max - min) \n    else \n      s = d / (max + min) \n    end\n    if max == r then\n      h = (g - b) / d\n      if g < b then \n        h = h + 6 \n      end\n    elseif max == g then \n      h = (b - r) / d + 2\n    elseif max == b then \n      h = (r - g) / d + 4\n    end\n    h = h / 6\n  end\n\n  return h, s, l\nend\n\n\nlocal hue, sat, bri\nhue, sat = rgbToHsl(R,G,B)\nhue = math.floor(hue * 65535)\nsat = math.floor(sat * 255)\nbri = math.floor(L * 2.55)\n\nlocal conn = Net.FHttp(HueAddress,HuePort) \nconn:PUT('/api/'..HueUser..'/lights/'..HueDevice..'/state', '{\"on\":true, \"bri\":'..bri..' , \"hue\":'..hue..' , \"sat\":'..sat..' }')\n\n-- now set the icon and store icon state\nHueIcon = HueIcon + math.floor(L*0.99/10) + 1  -- calculate IconID\nfibaro:call(myDeviceID, \"setProperty\", \"currentIcon\", HueIcon)\nfibaro:setGlobal('Philips_Hue_'..tostring(HueDevice), HueIcon)\n","buttonIcon":1005,"value":79,"favourite":false,"main":false}]},{"type":"slider","elements":[{"id":4,"lua":true,"waitForResponse":false,"caption":"Red","name":"sliderRed","msg":"local HueDevice = 1    -- enter Philips Hue Light ID\n\n-- Nothing to customize below\n-- This code goes into the ON button and the 4 sliders\n\nlocal HueUser = 'domoplusplus'\nlocal HueAddress = fibaro:getGlobalValue('Philips_Hue_IP')\nlocal HuePort = 80\nlocal HueIcon = fibaro:getGlobalValue('Philips_Hue_IconID')\n\nlocal myDeviceID = fibaro:getSelfId()\nlocal R = fibaro:get(myDeviceID, \"ui.sliderRed.value\")\nlocal G = fibaro:get(myDeviceID, \"ui.sliderGreen.value\")\nlocal B = fibaro:get(myDeviceID, \"ui.sliderBlue.value\")\nlocal L = fibaro:get(myDeviceID, \"ui.sliderLevel.value\")\n\n--[[\n * Converts an RGB color value to HSL. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n * Assumes r, g, and b are contained in the set [0, 100] and\n * returns h, s, and l in the set [0, 1].\n Function modified from https://github.com/EmmanuelOga/columns/blob/master/utils/color.lua\n]]\nfunction rgbToHsl(r, g, b)\n  r, g, b = r / 100, g / 100, b / 100\n\n  local max, min = math.max(r, g, b), math.min(r, g, b)\n  local h, s, l\n\n  l = (max + min) / 2\n\n  if max == min then\n    h, s = 0, 0 -- achromatic\n  else\n    local d = max - min\n    if l > 0.5 then \n      s = d / (2 - max - min) \n    else \n      s = d / (max + min) \n    end\n    if max == r then\n      h = (g - b) / d\n      if g < b then \n        h = h + 6 \n      end\n    elseif max == g then \n      h = (b - r) / d + 2\n    elseif max == b then \n      h = (r - g) / d + 4\n    end\n    h = h / 6\n  end\n\n  return h, s, l\nend\n\n\nlocal hue, sat, bri\nhue, sat = rgbToHsl(R,G,B)\nhue = math.floor(hue * 65535)\nsat = math.floor(sat * 255)\nbri = math.floor(L * 2.55)\n\nlocal conn = Net.FHttp(HueAddress,HuePort) \nconn:PUT('/api/'..HueUser..'/lights/'..HueDevice..'/state', '{\"on\":true, \"bri\":'..bri..' , \"hue\":'..hue..' , \"sat\":'..sat..' }')\n\n-- now set the icon and store icon state\nHueIcon = HueIcon + math.floor(L*0.99/10) + 1  -- calculate IconID\nfibaro:call(myDeviceID, \"setProperty\", \"currentIcon\", HueIcon)\nfibaro:setGlobal('Philips_Hue_'..tostring(HueDevice), HueIcon)\n","buttonIcon":1005,"value":0,"favourite":false,"main":false}]},{"type":"slider","elements":[{"id":5,"lua":true,"waitForResponse":false,"caption":"Green","name":"sliderGreen","msg":"local HueDevice = 1    -- enter Philips Hue Light ID\n\n-- Nothing to customize below\n-- This code goes into the ON button and the 4 sliders\n\nlocal HueUser = 'domoplusplus'\nlocal HueAddress = fibaro:getGlobalValue('Philips_Hue_IP')\nlocal HuePort = 80\nlocal HueIcon = fibaro:getGlobalValue('Philips_Hue_IconID')\n\nlocal myDeviceID = fibaro:getSelfId()\nlocal R = fibaro:get(myDeviceID, \"ui.sliderRed.value\")\nlocal G = fibaro:get(myDeviceID, \"ui.sliderGreen.value\")\nlocal B = fibaro:get(myDeviceID, \"ui.sliderBlue.value\")\nlocal L = fibaro:get(myDeviceID, \"ui.sliderLevel.value\")\n\n--[[\n * Converts an RGB color value to HSL. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n * Assumes r, g, and b are contained in the set [0, 100] and\n * returns h, s, and l in the set [0, 1].\n Function modified from https://github.com/EmmanuelOga/columns/blob/master/utils/color.lua\n]]\nfunction rgbToHsl(r, g, b)\n  r, g, b = r / 100, g / 100, b / 100\n\n  local max, min = math.max(r, g, b), math.min(r, g, b)\n  local h, s, l\n\n  l = (max + min) / 2\n\n  if max == min then\n    h, s = 0, 0 -- achromatic\n  else\n    local d = max - min\n    if l > 0.5 then \n      s = d / (2 - max - min) \n    else \n      s = d / (max + min) \n    end\n    if max == r then\n      h = (g - b) / d\n      if g < b then \n        h = h + 6 \n      end\n    elseif max == g then \n      h = (b - r) / d + 2\n    elseif max == b then \n      h = (r - g) / d + 4\n    end\n    h = h / 6\n  end\n\n  return h, s, l\nend\n\n\nlocal hue, sat, bri\nhue, sat = rgbToHsl(R,G,B)\nhue = math.floor(hue * 65535)\nsat = math.floor(sat * 255)\nbri = math.floor(L * 2.55)\n\nlocal conn = Net.FHttp(HueAddress,HuePort) \nconn:PUT('/api/'..HueUser..'/lights/'..HueDevice..'/state', '{\"on\":true, \"bri\":'..bri..' , \"hue\":'..hue..' , \"sat\":'..sat..' }')\n\n-- now set the icon and store icon state\nHueIcon = HueIcon + math.floor(L*0.99/10) + 1  -- calculate IconID\nfibaro:call(myDeviceID, \"setProperty\", \"currentIcon\", HueIcon)\nfibaro:setGlobal('Philips_Hue_'..tostring(HueDevice), HueIcon)\n","buttonIcon":1005,"value":0,"favourite":false,"main":false}]},{"type":"slider","elements":[{"id":6,"lua":true,"waitForResponse":false,"caption":"Blue","name":"sliderBlue","msg":"local HueDevice = 1    -- enter Philips Hue Light ID\n\n-- Nothing to customize below\n-- This code goes into the ON button and the 4 sliders\n\nlocal HueUser = 'domoplusplus'\nlocal HueAddress = fibaro:getGlobalValue('Philips_Hue_IP')\nlocal HuePort = 80\nlocal HueIcon = fibaro:getGlobalValue('Philips_Hue_IconID')\n\nlocal myDeviceID = fibaro:getSelfId()\nlocal R = fibaro:get(myDeviceID, \"ui.sliderRed.value\")\nlocal G = fibaro:get(myDeviceID, \"ui.sliderGreen.value\")\nlocal B = fibaro:get(myDeviceID, \"ui.sliderBlue.value\")\nlocal L = fibaro:get(myDeviceID, \"ui.sliderLevel.value\")\n\n--[[\n * Converts an RGB color value to HSL. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n * Assumes r, g, and b are contained in the set [0, 100] and\n * returns h, s, and l in the set [0, 1].\n Function modified from https://github.com/EmmanuelOga/columns/blob/master/utils/color.lua\n]]\nfunction rgbToHsl(r, g, b)\n  r, g, b = r / 100, g / 100, b / 100\n\n  local max, min = math.max(r, g, b), math.min(r, g, b)\n  local h, s, l\n\n  l = (max + min) / 2\n\n  if max == min then\n    h, s = 0, 0 -- achromatic\n  else\n    local d = max - min\n    if l > 0.5 then \n      s = d / (2 - max - min) \n    else \n      s = d / (max + min) \n    end\n    if max == r then\n      h = (g - b) / d\n      if g < b then \n        h = h + 6 \n      end\n    elseif max == g then \n      h = (b - r) / d + 2\n    elseif max == b then \n      h = (r - g) / d + 4\n    end\n    h = h / 6\n  end\n\n  return h, s, l\nend\n\n\nlocal hue, sat, bri\nhue, sat = rgbToHsl(R,G,B)\nhue = math.floor(hue * 65535)\nsat = math.floor(sat * 255)\nbri = math.floor(L * 2.55)\n\nlocal conn = Net.FHttp(HueAddress,HuePort) \nconn:PUT('/api/'..HueUser..'/lights/'..HueDevice..'/state', '{\"on\":true, \"bri\":'..bri..' , \"hue\":'..hue..' , \"sat\":'..sat..' }')\n\n-- now set the icon and store icon state\nHueIcon = HueIcon + math.floor(L*0.99/10) + 1  -- calculate IconID\nfibaro:call(myDeviceID, \"setProperty\", \"currentIcon\", HueIcon)\nfibaro:setGlobal('Philips_Hue_'..tostring(HueDevice), HueIcon)\n","buttonIcon":1005,"value":0,"favourite":false,"main":false}]},{"type":"button","elements":[{"id":7,"lua":true,"waitForResponse":false,"caption":"P1","name":"buttonP1","empty":false,"msg":"local HueDevice = 1    -- enter Philips Hue Light ID\n\nlocal preset = 1       -- the preset to use for this button  --> update to match the button (1 - 4) this code is in!!\n\nlocal presets = {      -- customize the presets if you want, see the Philips api docs for the json notation\n     '{ \"bri\":144, \"hue\":13088, \"sat\":212 }',    -- preset 1; Relax\n     '{ \"bri\":240, \"hue\":15331, \"sat\":121 }',    -- preset 2; Reading\n     '{ \"bri\":203, \"hue\":34495, \"sat\":232 }',    -- preset 3; Energy\n     '{ \"effect\":\"colorloop\" }',                 -- preset 4; Colorloop\n}\n\n-- Nothing to customize below\n-- This code goes into the 4 preset buttons (the 5th is the Tgl button)\n\n\nlocal HuePreset = presets[preset]\nlocal HueUser = 'domoplusplus'\nlocal HueAddress = fibaro:getGlobalValue('Philips_Hue_IP')\nlocal HuePort = 80\nlocal HueIcon = fibaro:getGlobalValue('Philips_Hue_IconID')\nlocal myDeviceID = fibaro:getSelfId()\n\n\nlocal conn = Net.FHttp(HueAddress,HuePort) \nconn:PUT('/api/'..HueUser..'/lights/'..HueDevice..'/state', preset)\n\n-- check the preset to update icons\nlocal jsonTable = json.decode(HuePreset)\njsonTable.on = true   -- preset means always on\nif jsonTable.bri then\n   -- brightness is being set so update slider\n   local bri = math.floor(tonumber(jsonTable.bri)/2.55)\n   fibaro:call(myDeviceID, \"setProperty\", \"ui.sliderLevel.value\", tostring(bri))\nend\n-- RGB sliders will NOT be updated\nfibaro:call(myDeviceID, \"pressButton\", \"1\")  -- 1 = On  --> will set proper icon and update globals\n\n-- serialize updated table and transmit to Hue\nHuePreset = json.encode(jsonTable)\nlocal conn = Net.FHttp(HueAddress,HuePort) \nconn:PUT('/api/'..HueUser..'/lights/'..HueDevice..'/state', HuePreset)\n","buttonIcon":1004,"favourite":false,"main":false},{"id":8,"lua":true,"waitForResponse":false,"caption":"P2","name":"buttonP2","empty":false,"msg":"local HueDevice = 1    -- enter Philips Hue Light ID\n\nlocal preset = 2       -- the preset to use for this button  --> update to match the button (1 - 4) this code is in!!\n\nlocal presets = {      -- customize the presets if you want, see the Philips api docs for the json notation\n     '{ \"bri\":144, \"hue\":13088, \"sat\":212 }',    -- preset 1; Relax\n     '{ \"bri\":240, \"hue\":15331, \"sat\":121 }',    -- preset 2; Reading\n     '{ \"bri\":203, \"hue\":34495, \"sat\":232 }',    -- preset 3; Energy\n     '{ \"effect\":\"colorloop\" }',                 -- preset 4; Colorloop\n}\n\n-- Nothing to customize below\n-- This code goes into the 4 preset buttons (the 5th is the Tgl button)\n\n\nlocal HuePreset = presets[preset]\nlocal HueUser = 'domoplusplus'\nlocal HueAddress = fibaro:getGlobalValue('Philips_Hue_IP')\nlocal HuePort = 80\nlocal HueIcon = fibaro:getGlobalValue('Philips_Hue_IconID')\nlocal myDeviceID = fibaro:getSelfId()\n\n\nlocal conn = Net.FHttp(HueAddress,HuePort) \nconn:PUT('/api/'..HueUser..'/lights/'..HueDevice..'/state', preset)\n\n-- check the preset to update icons\nlocal jsonTable = json.decode(HuePreset)\njsonTable.on = true   -- preset means always on\nif jsonTable.bri then\n   -- brightness is being set so update slider\n   local bri = math.floor(tonumber(jsonTable.bri)/2.55)\n   fibaro:call(myDeviceID, \"setProperty\", \"ui.sliderLevel.value\", tostring(bri))\nend\n-- RGB sliders will NOT be updated\nfibaro:call(myDeviceID, \"pressButton\", \"1\")  -- 1 = On  --> will set proper icon and update globals\n\n-- serialize updated table and transmit to Hue\nHuePreset = json.encode(jsonTable)\nlocal conn = Net.FHttp(HueAddress,HuePort) \nconn:PUT('/api/'..HueUser..'/lights/'..HueDevice..'/state', HuePreset)\n","buttonIcon":1004,"favourite":false,"main":false},{"id":9,"lua":true,"waitForResponse":false,"caption":"P3","name":"buttonP3","empty":false,"msg":"local HueDevice = 1    -- enter Philips Hue Light ID\n\nlocal preset = 3       -- the preset to use for this button  --> update to match the button (1 - 4) this code is in!!\n\nlocal presets = {      -- customize the presets if you want, see the Philips api docs for the json notation\n     '{ \"bri\":144, \"hue\":13088, \"sat\":212 }',    -- preset 1; Relax\n     '{ \"bri\":240, \"hue\":15331, \"sat\":121 }',    -- preset 2; Reading\n     '{ \"bri\":203, \"hue\":34495, \"sat\":232 }',    -- preset 3; Energy\n     '{ \"effect\":\"colorloop\" }',                 -- preset 4; Colorloop\n}\n\n-- Nothing to customize below\n-- This code goes into the 4 preset buttons (the 5th is the Tgl button)\n\n\nlocal HuePreset = presets[preset]\nlocal HueUser = 'domoplusplus'\nlocal HueAddress = fibaro:getGlobalValue('Philips_Hue_IP')\nlocal HuePort = 80\nlocal HueIcon = fibaro:getGlobalValue('Philips_Hue_IconID')\nlocal myDeviceID = fibaro:getSelfId()\n\n\nlocal conn = Net.FHttp(HueAddress,HuePort) \nconn:PUT('/api/'..HueUser..'/lights/'..HueDevice..'/state', preset)\n\n-- check the preset to update icons\nlocal jsonTable = json.decode(HuePreset)\njsonTable.on = true   -- preset means always on\nif jsonTable.bri then\n   -- brightness is being set so update slider\n   local bri = math.floor(tonumber(jsonTable.bri)/2.55)\n   fibaro:call(myDeviceID, \"setProperty\", \"ui.sliderLevel.value\", tostring(bri))\nend\n-- RGB sliders will NOT be updated\nfibaro:call(myDeviceID, \"pressButton\", \"1\")  -- 1 = On  --> will set proper icon and update globals\n\n-- serialize updated table and transmit to Hue\nHuePreset = json.encode(jsonTable)\nlocal conn = Net.FHttp(HueAddress,HuePort) \nconn:PUT('/api/'..HueUser..'/lights/'..HueDevice..'/state', HuePreset)\n","buttonIcon":1004,"favourite":false,"main":false},{"id":10,"lua":true,"waitForResponse":false,"caption":"P4","name":"buttonP4","empty":false,"msg":"local HueDevice = 1    -- enter Philips Hue Light ID\n\nlocal preset = 4       -- the preset to use for this button  --> update to match the button (1 - 4) this code is in!!\n\nlocal presets = {      -- customize the presets if you want, see the Philips api docs for the json notation\n     '{ \"bri\":144, \"hue\":13088, \"sat\":212 }',    -- preset 1; Relax\n     '{ \"bri\":240, \"hue\":15331, \"sat\":121 }',    -- preset 2; Reading\n     '{ \"bri\":203, \"hue\":34495, \"sat\":232 }',    -- preset 3; Energy\n     '{ \"effect\":\"colorloop\" }',                 -- preset 4; Colorloop\n}\n\n-- Nothing to customize below\n-- This code goes into the 4 preset buttons (the 5th is the Tgl button)\n\n\nlocal HuePreset = presets[preset]\nlocal HueUser = 'domoplusplus'\nlocal HueAddress = fibaro:getGlobalValue('Philips_Hue_IP')\nlocal HuePort = 80\nlocal HueIcon = fibaro:getGlobalValue('Philips_Hue_IconID')\nlocal myDeviceID = fibaro:getSelfId()\n\n\nlocal conn = Net.FHttp(HueAddress,HuePort) \nconn:PUT('/api/'..HueUser..'/lights/'..HueDevice..'/state', preset)\n\n-- check the preset to update icons\nlocal jsonTable = json.decode(HuePreset)\njsonTable.on = true   -- preset means always on\nif jsonTable.bri then\n   -- brightness is being set so update slider\n   local bri = math.floor(tonumber(jsonTable.bri)/2.55)\n   fibaro:call(myDeviceID, \"setProperty\", \"ui.sliderLevel.value\", tostring(bri))\nend\n-- RGB sliders will NOT be updated\nfibaro:call(myDeviceID, \"pressButton\", \"1\")  -- 1 = On  --> will set proper icon and update globals\n\n-- serialize updated table and transmit to Hue\nHuePreset = json.encode(jsonTable)\nlocal conn = Net.FHttp(HueAddress,HuePort) \nconn:PUT('/api/'..HueUser..'/lights/'..HueDevice..'/state', HuePreset)\n","buttonIcon":1004,"favourite":false,"main":false},{"id":11,"lua":true,"waitForResponse":false,"caption":"Tgl","name":"buttonToggle","empty":false,"msg":"local HueDevice = 1    -- enter Philips Hue Light ID\n\n-- Nothing to customize below\n-- This code goes into the Tgl button, which is also the 'main' button (most right on the preset list)\n\nlocal myDeviceID = fibaro:getSelfId()\nlocal HueIcon = tonumber(fibaro:getGlobalValue('Philips_Hue_IconID')) or 0  -- get base icon == off icon\nlocal icon = tonumber(fibaro:getGlobalValue('Philips_Hue_'..tostring(HueDevice))) or 0\n\nif icon == HueIcon then\n  fibaro:call(myDeviceID, \"pressButton\", \"1\")  -- 1 = On\nelse\n  fibaro:call(myDeviceID, \"pressButton\", \"2\")  -- 2 = Off\nend\n","buttonIcon":1004,"favourite":false,"main":true}]}]},"actions":{"pressButton":1,"setSlider":2,"setProperty":2}}